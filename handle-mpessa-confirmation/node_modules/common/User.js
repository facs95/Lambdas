const bip39 = require('bip39');
const HDWalletProvider = require('truffle-hdwallet-provider');
const minToken = require('./MinToken.json');
const Web3 = require('web3');
const { network, minContractAddress } = require('./config');
const db = require('./database');

exports.initUser = initUser;

/** Init User instance.
 * @param {string} countryCode - phone number country code e.g. "1" = for US.
 * @param {string} phoneNumber - phone number itself e.g. "9190000000".
 * @return {User}
 */
async function initUser(countryCode, phoneNumber) {
  const user = new User(countryCode, phoneNumber);
  await user._initAsync();
  return user;
}

// TODO should I move web3 out of this file?
/**
 * @class User
 * @classdesc User object bla bla bla add better description in future.
 * @param {string} countryCode - phone number country code e.g. "1" = for US.
 * @param {string} phoneNumber - phone number itself e.g. "9190000000".
 * @property {string} id - user id.
 * @property {mnemonic} mnemonic - user's wallet mnemonic.
 * @property {object} web3 - an instance of web3.
 * @property {object} minContract - an instance of MIN contract.
 * @property {boolean} isNew
 * @private @property {object} _web3 - DON'T access it directly used to store an instance of Web3.
 * @private @property {object} _minContract - DON'T access it directly used to store an instance of MIN contract.
 *
 * @function getBalance
 * @function getAccount
 * @private @function _initWeb3 - DON'T call it directly
 */
class User {
  constructor(countryCode = throwError(), phoneNumber = throwError()) {
    this.id = `${countryCode}${phoneNumber}`;
    this.countryCode = countryCode;
    this.phoneNumber = phoneNumber;
  }
  /**
   * Used by initUser() call.
   * @private
   * DON'T call it directly
   */
  async _initAsync() {
    await this._initMnemonic();
  }

  get web3() {
    if (!this._web3) {
      this._web3 = this._initWeb3(this.mnemonic);
    }
    return this._web3;
  }

  get minContract() {
    if (!this._minContract) {
      this._minContract = new this.web3.eth.Contract(
        minToken.abi,
        minContractAddress
      );
    }
    return this._minContract;
  }

  async getAccount() {
    const accounts = await this.web3.eth.getAccounts();
    return accounts[0];
  }

  async getBalance() {
    const account = await this.getAccount();
    const balance = await this.minContract.methods
      .getBalance()
      .call({ from: account });
    return balance;
  }

  async send(recipientAccount, amount) {
    const account = await this.getAccount();
    const sendTransaction = await this.minContract.methods
      .transfer(recipientAccount, amount)
      .send({
        from: account
        // gas: '1000000'
      });
    return sendTransaction;
  }

  /** @private */
  _toStorageObject() {
    return {
      id: this.id,
      countryCode: this.countryCode,
      phoneNumber: this.phoneNumber,
      mnemonic: this.mnemonic
    };
  }

  /** @private */
  async _saveToDatabase() {
    // TODO encrypt mnemonic before storing it
    await db.setUser(this._toStorageObject());
    console.log('Saved new user to database');
  }

  /** @private */
  async _initMnemonic() {
    const user = await db.getUser(this.id);
    const isNew = !user;
    this.isNew = isNew;
    if (isNew) {
      console.log('Creating new mnemonic');
      this.mnemonic = bip39.generateMnemonic();
      await this._saveToDatabase();
    } else {
      console.log('Got mnemonic from database');
      this.mnemonic = user.mnemonic;
    }
  }

  /**
   * Init Web3 function
   * @private
   * DON'T call it from outside the class
   * */
  _initWeb3(mnemonic) {
    const provider = new HDWalletProvider(mnemonic, network);
    console.debug(
      'The following accounts are going to be used',
      provider.getAddresses()
    );
    return new Web3(provider);
  }
}

function throwError() {
  throw new Error('Missing parameter');
}
